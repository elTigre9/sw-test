{"version":3,"sources":["components/PushNotifications.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotificationsOnly","permissionsRef","useRef","showNotification","permission","current","Notification","body","onClick","console","log","window","requestPermission","then","schedule","scheduleJob","App","className","PushNotifications","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","addEventListener","a","location","pathname","navigator","serviceWorker","register","reg","scope","catch","err"],"mappings":"oSAyCeA,EAtCW,WAExB,IAAMC,EAAiBC,iBAAO,IASxBC,EAAmB,SAACC,GAExB,GADAH,EAAeI,QAAUD,EACP,YAAfA,EAEkB,IAAIE,aAAa,cAAe,CACnDC,KAAM,6BAcV,OACE,oCACE,wBAAQC,QA5BS,WACnBC,QAAQC,IAAI,WACRC,OAAOL,cAEXA,aAAaM,oBAAoBC,KAAKV,IAwBpC,yBACA,wBAAQK,QAbiB,WAC3B,GAA8B,YAA3BP,EAAeI,QAAlB,CACAI,QAAQC,IAAI,mBACAI,IAASC,YAAY,eAAe,WACzB,IAAIT,aAAa,YAAa,CACjDC,KAAM,2CAQR,6BChBSS,MAdf,WAGE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,kCACE,cAACC,EAAD,WCCKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,IAEAR,OAAOqB,iBAAiB,OAAxB,sBAAgC,sBAAAC,EAAA,6DAC9BxB,QAAQC,IAAI,SAAUC,OAAOuB,SAASC,UADR,SAEbC,UAAUC,cAAcC,SAAS,UAAUzB,MAAK,SAAC0B,GAEhE9B,QAAQC,IAAI,0CAA2C6B,EAAIC,UAC1DC,OAAM,SAAAC,GAAG,OAAIjC,QAAQC,IAAI,2BAA4BgC,MAL1B,4D","file":"static/js/main.1824108c.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport schedule from 'node-schedule';\n\nconst NotificationsOnly = () => {\n\n  const permissionsRef = useRef('');\n  \n  const enableNotifs = () => {\n    console.log('notifs!');\n    if(!window.Notification) return;\n  \n    Notification.requestPermission().then(showNotification);\n  }\n  \n  const showNotification = (permission: string) => {\n    permissionsRef.current = permission;\n    if(permission !== 'granted') return;\n  \n    const notification = new Notification('Subscribed!', {\n      body: 'Thanks for subscribing!'\n    });\n  } \n  \n  const notificationSchedule = () => {\n    if(permissionsRef.current !== 'granted') return;\n    console.log('scheduling job!');\n    const job = schedule.scheduleJob('*/1 * * * *', () => {\n      const notification = new Notification('Doing it!', {\n        body: 'And doing it, and doing it, well.'\n      });\n    })\n  }\n\n  return (\n    <section>\n      <button onClick={enableNotifs}>Show Notifs</button>\n      <button onClick={notificationSchedule}>Show Notifs</button>\n    </section>\n  );\n}\n\nexport default NotificationsOnly;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PushNotifications from './components/PushNotifications';\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <section>\n          <PushNotifications />\n        </section>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nwindow.addEventListener('load', async () => {\n  console.log('path: ', window.location.pathname);\n  const sw = await navigator.serviceWorker.register('/sw.js').then((reg) => {\n    // registration successful\n    console.log('sw registration was successful. Scope: ', reg.scope);\n  }).catch(err => console.log('sw registration failed: ', err));\n});"],"sourceRoot":""}